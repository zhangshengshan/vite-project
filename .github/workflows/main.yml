name: Release
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # Change this to npm, yarn or pnpm.


      - name: Get the branch name
        id: get_branch
        run: echo "::set-output name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.VITE }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: |
            Excalidraw Desktop v__VERSION__ - Commit: ${{ env.GITHUB_SHA }} - Branch: ${{ steps.get_branch.outputs.BRANCH_NAME }}
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false

#      - name: Build the app
#        uses: tauri-apps/tauri-action@v0
#
#        env:
#          GITHUB_TOKEN: ${{ secrets.VITE }}
#          GITHUB_SHA: ${{ github.sha }}
#          GITHUB_REF: ${{ github.ref }}
#        with:
#          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
##          releaseName: 'Excalidraw Desktop v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
#          releaseName: |
#            Excalidraw Desktop v__VERSION__ - Commit: ${{ env.GITHUB_SHA }} - Branch: ${GITHUB_REF/refs\/heads\//}
#          releaseBody: 'See the assets to download and install this version.'
#          releaseDraft: true
#          prerelease: false
      
      - name: Set OS suffix
        id: os_suffix
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            echo "::set-output name=suffix::win"
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "::set-output name=suffix::macos"
          else
            echo "::set-output name=suffix::linux"
          fi

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.VITE }}
#        with:
##          tag_name: ${{ github.run_number }}-${{ steps.os_suffix.outputs.suffix }}
##          release_name: Release-${{ github.run_number }}-${{ steps.os_suffix.outputs.suffix }}
#          tag_name: ${{ github.run_number }}
#          release_name: Release-${{ github.run_number }}
#          draft: false
#          prerelease: false


#      - name: Upload Windows Release Asset
#        if: matrix.platform == 'windows-latest'
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.VITE }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./src-tauri/target/release/bundle/nsis/vite-project_0.1.0_x64-setup.exe
#          asset_name: vite-project_0.1.0_x64-setup.exe
#          asset_content_type: application/octet-stream
#
#      - name: Upload MacOS Release Asset
#        if: matrix.platform == 'macos-latest'
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.VITE }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: /Users/runner/work/vite-project/vite-project/src-tauri/target/release/bundle/dmg/vite-project_0.1.0_x64.dmg
#          asset_name: vite-project_0.1.0_x64.dmg
#          asset_content_type: application/octet-stream
#
#      - name: Upload Linux Release Asset
#        if: matrix.platform == 'ubuntu-20.04'
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.VITE }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./src-tauri/target/release/bundle/deb/vite-project_0.1.0_amd64.deb
#          asset_name: vite-project_0.1.0_amd64.deb
#          asset_content_type: application/octet-stream


